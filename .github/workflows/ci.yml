name: CI Test Deck

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  postman-tests:
    name: 🧪 API Functional Tests (Postman)
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Run Postman tests with Docker
        run: |
          docker build -t postman-tests ./api-tests/
          docker run -v ${{ github.workspace }}/api-tests/postman:/etc/newman postman-tests

      - name: 📦 Upload Newman report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: postman-report
          path: api-tests/postman/newman-report.json

      - name: 🔎 Run Trivy on Postman image and export JSON
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: postman-tests
          format: json
          output: trivy-postman-report.json
          ignore-unfixed: true

      - name: 📦 Upload Postman Trivy report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-postman-security-report
          path: trivy-postman-report.json        

  jmeter-tests:
    name: 🚀 Performance Tests (JMeter)
    runs-on: ubuntu-latest
    needs: postman-tests

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🐳 Run JMeter performance tests
        run: |
          docker run --rm -v "${{ github.workspace }}/performance-tests/jmeter:/test" justb4/jmeter \
            -n -t /test/posts-crud.jmx -l /test/results.jtl

      - name: 📦 Upload JMeter results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results
          path: performance-tests/jmeter/results.jtl

      - name: 🔎 Run Trivy on JMeter image and export JSON
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: justb4/jmeter
          format: json
          output: trivy-jmeter-report.json
          ignore-unfixed: true

      - name: 📦 Upload JMeter Trivy report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-jmeter-security-report
          path: trivy-jmeter-report.json   
          
  ui-tests:
    name: 🖥️ UI Tests (Playwright)
    runs-on: ubuntu-latest
    needs: jmeter-tests

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐳 Build Playwright Docker image
        run: docker build -t ui-tests ./ui-tests

      - name: 🧪 Run Playwright UI tests inside Docker
        run: |
            docker run --rm \
            -v ${{ github.workspace }}/ui-tests/test-results:/app/test-results \
            -w /app \
            ui-tests npm run test:ui

      - name: 📦 Upload Playwright HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-ui-report
          path: ui-tests/test-results/

      - name: 🔎 Run Trivy on Playwright image and export JSON
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ui-tests
          format: json
          output: trivy-playwright-report.json
          ignore-unfixed: true

      - name: 📦 Upload Playwright Trivy report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-playwright-security-report
          path: trivy-playwright-report.json


  report:
    name: 📊 Summary Results Report
    needs: [postman-tests, jmeter-tests, ui-tests]
    runs-on: ubuntu-latest
    steps:
      - name: ✉️ Send summary or process artifacts
        run: echo "All jobs done! Prepare summary here." 
        
      - name: 📊 Process all reports
        run: |
          echo "Performance Tests:"
          cat jmeter-results/results.jtl

          echo "Api Tests:"
          cat postman-report/newman-report.json

          echo "UI Tests:"
          ls playwright-ui-report/